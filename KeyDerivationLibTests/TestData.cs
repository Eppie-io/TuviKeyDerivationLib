using Entities;
using MimeKit;

namespace KeyDerivationLibTests
{
    internal static class TestData
    {
        public static string[] GetTestSeed()
        {
            return new string[] {
                "ozone",    "drill",    "grab",
                "fiber",    "curtain",  "grace",
                "pudding",  "thank",    "cruise",
                "elder",    "eight",    "picnic"
            };
        }

        public static List<KeyValuePair<string, bool>> GetDictionaryTestData()
        {
            return new List<KeyValuePair<string, bool>>()
            {
                new KeyValuePair<string, bool>("hello", true),
                new KeyValuePair<string, bool>("shine", true),
                new KeyValuePair<string, bool>("abracadabra", false),
                new KeyValuePair<string, bool>("fakdfbmsp", false)
            };
        }

        public static readonly MasterKey MasterKey = new MasterKey
        {
            Scalar = new byte[32]
            {
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22,
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22
            },
            ChainCode = new byte[32]
            {
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22,
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22
            }
        };

        public static readonly MasterKey MasterKey2 = new MasterKey
        {
            Scalar = new byte[32]
            {
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22,
                0x12, 0x34, 0x56, 0x78, 0x90, 0x44, 0x77, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22
            },
            ChainCode = new byte[32]
            {
                0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0x81, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22,
                0x12, 0x34, 0x56, 0x78, 0x49, 0xAB, 0xCD, 0xEF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1F, 0x20, 0x21, 0x22
            }
        };

        public static readonly PrivateKey AccountKey1 = new MasterKey
        {
            Scalar = new byte[32]
            {
                0x07, 0x77, 0x88, 0x11, 0x2d, 0xab, 0x13, 0x54, 0x0e, 0xbb, 0x67, 0x82, 0xb0, 0x60, 0x34, 0x73,
                0xa5, 0x6b, 0xfa, 0x5e, 0xd5, 0xf9, 0xd4, 0xd9, 0x68, 0xf8, 0x59, 0x58, 0x3c, 0x87, 0xf4, 0x57
            },
            ChainCode = new byte[32]
            {
                0xed, 0x34, 0x56, 0xc1, 0xb5, 0xfe, 0xb9, 0xe8, 0xb4, 0xe2, 0x6d, 0xd3, 0x3c, 0x27, 0xe1, 0xa9,
                0xdc, 0xdc, 0x80, 0xbf, 0xd2, 0x82, 0xc6, 0xb9, 0x91, 0x44, 0x9a, 0x2e, 0x31, 0x7b, 0x50, 0x56
            }
        };

        public static readonly PrivateKey AccountKey2 = new MasterKey
        {
            Scalar = new byte[32]
            {
                0xef, 0x45, 0x70, 0x40, 0xe2, 0x1f, 0x14, 0x68, 0x51, 0x0f, 0x1a, 0x3f, 0x18, 0xba, 0x40, 0x27,
                0x2d, 0x72, 0x0f, 0xf1, 0x26, 0x16, 0x55, 0xd3, 0x21, 0xfe, 0x6c, 0x12, 0xd7, 0x55, 0x9e, 0xba
            },
            ChainCode = new byte[32]
            {
                0x73, 0x8a, 0x98, 0x02, 0x0d, 0x3e, 0xb0, 0x69, 0xcd, 0x64, 0xa2, 0x89, 0x4b, 0xbf, 0x6a, 0xdf,
                0xfd, 0x5b, 0xdf, 0xf0, 0xac, 0x3b, 0xb7, 0xa7, 0x59, 0x32, 0x1a, 0x60, 0x5e, 0x0f, 0x83, 0x7a
            }
        };

        public static readonly byte[] ChildKey1 = new byte[32]
        {
            0x91, 0xeb, 0xc7, 0xfb, 0x74, 0xac, 0xd5, 0x23, 0x5b, 0xb5, 0xf0, 0x67, 0xfa, 0x77, 0xe4, 0x15,
            0x15, 0x4d, 0xe4, 0x7e, 0x95, 0x66, 0x3c, 0x28, 0x59, 0x14, 0xc0, 0xe8, 0x0b, 0x2d, 0xb3, 0x18
        };

        public static readonly byte[] ChildKey2 = new byte[32]
        {
            0xfc, 0x89, 0x17, 0x64, 0xd3, 0x9e, 0x94, 0x5c, 0x02, 0x6f, 0xa6, 0xc3, 0x29, 0x0f, 0x09, 0xa0,
            0x28, 0x1b, 0xb1, 0x77, 0x59, 0xaa, 0xf5, 0x08, 0x83, 0xdc, 0x42, 0xbd, 0x54, 0x10, 0x7e, 0x12
        };

        public class TestAccount
        {
            public string Name = "";
            public string Address = "";

            public MailboxAddress GetMailbox()
            {
                return new MailboxAddress(Name, Address);
            }

            public string GetPgpIdentity()
            {
                return Address;
            }
        };

        public static TestAccount GetAccount()
        {
            return new TestAccount { Address = "ivan@ivanov.net", Name = "Ivan Ivanov" };
        }

        public const string WrongPgpIdentity = "abra-cadabra...";
    }
}
